# src/handlers.py
from aiogram import types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.sleep.reminders import set_sleep_reminder
from src.sleep.advice import get_sleep_advice
from src.workout.generator import generate_workout
from keyboards import (
    main_menu_keyboard,
    sleep_menu_keyboard,
    workout_levels_keyboard,
)
from src.database import (
    save_workout,
    get_user_workouts,
    save_sleep_data,
)
from src.sleep.charts import fetch_sleep_data, create_sleep_chart

# Define FSM states for sleep
class SleepStates(StatesGroup):
    waiting_for_sleep_time = State()
    waiting_for_sleep_input = State()

async def send_welcome(message: Message):
    # Greet the user and show main menu
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî HabitQuest, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ó–û–ñ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
    )


# Sleep handlers
async def handle_sleep_command(message: Message):
    # Open sleep submenu
    await show_sleep_menu(message)

async def show_sleep_menu(message: Message):
    # Display sleep options
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –ø–æ —Å–Ω—É:",
        reply_markup=sleep_menu_keyboard(),
    )

async def handle_sleep_menu(message: Message, state: FSMContext):
    # Handle user selection in sleep submenu
    text = message.text
    if text == "üõå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        # Ask user for reminder time
        await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        await state.set_state(SleepStates.waiting_for_sleep_time)
    elif text == "‚ÑπÔ∏è –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É":
        await handle_advice(message)
    elif text == "‚è∞ –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–Ω–∞":
        # Prompt user to log sleep interval
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ –∏ –ø–æ–¥—ä—ë–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM")
        await state.set_state(SleepStates.waiting_for_sleep_input)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # Show sleep statistics
        await show_sleep_stats(message)
    elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        # Return to main menu
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await state.clear()

async def handle_advice(message: Message):
    # Send sleep advice
    advice = get_sleep_advice()
    await message.answer(f"–°–æ–≤–µ—Ç –ø–æ —Å–Ω—É: {advice}")

async def process_sleep_time(message: Message, state: FSMContext):
    # Process reminder time input and schedule
    time_str = message.text.strip()
    await set_sleep_reminder(message, time_str)
    await state.clear()

async def process_sleep_input(message: Message, state: FSMContext):
    try:
        sleep_time, wake_time = message.text.split('-')
        sleep_time = sleep_time.strip()
        wake_time = wake_time.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        save_sleep_data(
            user_id=message.from_user.id,
            sleep_time=sleep_time,
            wake_time=wake_time
        )

        await message.answer(
            "‚úÖ –í—Ä–µ–º—è —Å–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
            f"üõå –ó–∞—Å—ã–ø–∞–Ω–∏–µ: {sleep_time}\n"
            f"‚è∞ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: {wake_time}",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 23:00-07:30")


async def show_sleep_stats(message: Message):
    try:
        df = fetch_sleep_data(message.from_user.id)
        if df.empty:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–Ω–µ. "
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚è∞ –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–Ω–∞'",
                reply_markup=main_menu_keyboard()
            )
            return

        buf = create_sleep_chart(df)
        await message.answer_photo(
            types.BufferedInputFile(buf.read(), filename="sleep_stats.png"),
            caption="–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
            reply_markup=main_menu_keyboard()
        )
        buf.close()

    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}",
            reply_markup=main_menu_keyboard()
        )


# Trainings handlers
async def handle_train_command(message: Message):
    # Redirect to training menu
    await handle_train_text(message)

async def handle_train_text(message: Message):
    # Show workout levels
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=workout_levels_keyboard(),
    )

async def handle_my_trainings_command(message: Message):
    # Redirect to my trainings
    await handle_my_trainings_button(message)

async def handle_my_trainings_button(message: Message):
    # Show user's saved workouts
    workouts = get_user_workouts(message.from_user.id)
    if not workouts:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí§")
        return
    response = "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ–∏ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for date, level, exercises in workouts:
        response += (
            f"üìÖ {date}\n"
            f"üî∏ –£—Ä–æ–≤–µ–Ω—å: {level.title()}\n"
            f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n{exercises}\n\n"
        )
    await message.answer(response.strip())

async def handle_level_callback(callback: CallbackQuery):
    # Generate and save workout based on level
    mapping = {"level_easy": "–ª—ë–≥–∫–∞—è", "level_medium": "—Å—Ä–µ–¥–Ω—è—è", "level_hard": "—Ç—è–∂—ë–ª–∞—è"}
    level = mapping.get(callback.data)
    workout = generate_workout(level=level)
    save_workout(
        user_id=callback.from_user.id,
        level=level,
        exercises=workout,
    )
    await callback.message.answer(f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({level.title()}):\n{workout}")
    await callback.answer()
